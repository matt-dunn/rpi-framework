<?php

namespace RPI\Framework\Test\RPI\Framework\Helpers;

/**
 * Test class for Utils.
 * Generated by PHPUnit on 2012-06-25 at 09:43:16.
 */
class UtilsTest extends \RPI\Framework\Test\Base
{
    /**
     * @var Utils
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testIs_assoc().
     */
    public function testIsAssoc()
    {
        $array1 = array(1, 2, "three", "four", 5);
        $this->assertFalse(\RPI\Framework\Helpers\Utils::isAssoc($array1));
        
        $array2 = array("item1" => 1, "item2" => 2, "item3" => "three", "item4" => "four", "item5" => 5);
        $this->assertTrue(\RPI\Framework\Helpers\Utils::isAssoc($array2));
        
        $array3 = array(
            "item1" => 1, "item2" => 2, "item3" => "three", "item4" => "four", "item5" => 5, array(1, 2, 3)
        );
        $this->assertTrue(\RPI\Framework\Helpers\Utils::isAssoc($array3));
        
        $array4 = array(
            array(1, 2, 3), "item1" => 1, "item2" => 2, "item3" => "three", "item4" => "four", "item5" => 5
        );
        $this->assertTrue(\RPI\Framework\Helpers\Utils::isAssoc($array4));
        
        $array5 = array(
            "item0" => array(1, 2, 3), "item1" => 1, "item2" => 2, "item3" => "three", "item4" => "four", "item5" => 5
        );
        $this->assertTrue(\RPI\Framework\Helpers\Utils::isAssoc($array5));
    }

    /**
     * @todo Implement testGetFormValue().
     */
    public function testGetFormValue()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetGetValue().
     */
    public function testGetGetValue()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testR_implode().
     */
    public function testRimplode()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testGetSafeValue()
    {
        $_POST["testUnsafeString"] = "<script type=\"text/javascript\">alert('unsafe');</script>";
        
        $this->assertEquals(
            "&lt;script type=&quot;text/javascript&quot;&gt;alert('unsafe');&lt;/script&gt;",
            \RPI\Framework\Helpers\Utils::GetSafeValue($_POST["testUnsafeString"])
        );
    }

    public function testGetNamedValueValidNoDefaultValue()
    {
        $_POST["testString"] = "stringValue";
        
        $this->assertEquals("stringValue", \RPI\Framework\Helpers\Utils::getNamedValue($_POST, "testString"));
    }

    public function testGetNamedValueUnknownKeyNoDefaultValue()
    {
        $this->assertNull(\RPI\Framework\Helpers\Utils::getNamedValue($_POST, "unknownKey"));
    }

    public function testGetNamedValueUnknownKeyDefaulValuet()
    {
        $this->assertEquals(
            "defaultValue",
            \RPI\Framework\Helpers\Utils::getNamedValue($_POST, "unknownKey", "defaultValue")
        );
    }

    /**
     * @todo Implement testIsEnumValue().
     */
    public function testIsEnumValue()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testValidateOption().
     */
    public function testValidateOption()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testConvertArrayToCsv().
     */
    public function testConvertArrayToCsv()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRedirect().
     */
    public function testRedirect()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCurrentPageURI().
     */
    public function testCurrentPageURI()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testImplode_with_key().
     */
    public function testImplodeWithKey()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testNormalizeString()
    {
        $this->assertEquals(
            "test string with extra spaces and spaces at beginning and end",
            \RPI\Framework\Helpers\Utils::normalizeString(
                "  test string   with   extra  spaces and  spaces at   beginning and  end   "
            )
        );
    }

    public function testFormatCamelCaseTitle()
    {
        $this->assertEquals("Lowercase", \RPI\Framework\Helpers\Utils::formatCamelCaseTitle("lowercase"));

        $this->assertEquals("Lower Camel Case", \RPI\Framework\Helpers\Utils::formatCamelCaseTitle("lowerCamelCase"));

        $this->assertEquals("Camel Case", \RPI\Framework\Helpers\Utils::formatCamelCaseTitle("CamelCase"));

        $this->assertEquals("Hyphen Test", \RPI\Framework\Helpers\Utils::formatCamelCaseTitle("hyphen-test"));

        $this->assertEquals(
            "Hyphen Test Camel Case String",
            \RPI\Framework\Helpers\Utils::formatCamelCaseTitle("hyphen-testCamelCase-string")
        );

        $this->assertEquals(
            "Hyphen Test Camel Case String Lower With Space",
            \RPI\Framework\Helpers\Utils::formatCamelCaseTitle("hyphen-testCamelCase-string lowerWithSpace")
        );

        $this->assertEquals(
            "Hyphen Test Camel Case String Upper With Space",
            \RPI\Framework\Helpers\Utils::formatCamelCaseTitle("hyphen-testCamelCase-string UpperWithSpace")
        );

        $this->assertEquals(
            "Multiple Hyphen Test Camel Case String Upper With Multiple Space",
            \RPI\Framework\Helpers\Utils::formatCamelCaseTitle(
                "multipleHyphen-testCamelCase--string   UpperWithMultipleSpace"
            )
        );
    }

    /**
     * @todo Implement testGetValue().
     */
    public function testGetValue()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBuildFullPath().
     */
    public function testBuildFullPath()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
